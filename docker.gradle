buildscript {
    repositories { jcenter() }
}

plugins {
    id 'com.bmuschko.docker-remote-api' version '3.0.3'
}

apply plugin: 'java'
apply plugin: 'com.bmuschko.docker-remote-api'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile

def imagename="elgalu/selenium"
def version="3.8.1-p11"

docker {
    url = 'unix:///var/run/docker.sock'
}

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
task createContainer(type: DockerCreateContainer) {
    imageId = image
    cmd = ['true'] as String[]
}

import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
task pullImage(type: DockerPullImage) {

    println"========================================"+System.getProperty("env")

    repository = imagename
    tag = "$version"
}

/*

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task buildMyAppImage(type: DockerBuildImage) {
    inputDir = file('docker/myapp')
    tag = 'test/myapp'
}

task createMyAppContainer(type: DockerCreateContainer) {
    dependsOn buildMyAppImage
    targetImageId { buildMyAppImage.getImageId() }
    portBindings = ['8080:8080']
}

task startMyAppContainer(type: DockerStartContainer) {
    dependsOn createMyAppContainer
    targetContainerId { createMyAppContainer.getContainerId() }
}

task stopMyAppContainer(type: DockerStopContainer) {
    targetContainerId { createMyAppContainer.getContainerId() }
}

task functionalTestMyApp(type: Test) {
    dependsOn startMyAppContainer
    finalizedBy stopMyAppContainer
}
 */
